service: serverless-python3-demo
frameworkVersion: '2'
provider:
  name: aws
  runtime: python3.7
  lambdaHashingVersion: 20201221
  stage: ${file(./includes/env.json):env}

plugins:
  - serverless-step-functions
  - serverless-iam-roles-per-function

package:
  individually: true
  exclude:
    - ./**

functions:
  insertUserFunc:
    handler: insertUserFunction.lambda_handler
    package:
      include:
        - insertUserFunction.py
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - ${file(./includes/env.json):iamRole.insertUserRole}
        Resource: ["arn:aws:dynamodb:us-east-1:<user-id>:table/ListOfName"]
  promoteUserFun:
    handler: getPromoteUserFunction.lambda_handler
    package:
      include:
        - getPromoteUserFunction.py
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - ${file(./includes/env.json):iamRole.promoteUserRole}
        Resource: ["arn:aws:dynamodb:us-east-1:<user-id>:table/ListOfName"]

stepFunctions:
  stateMachines:
    myStateMachine:
      name: "${self:provider.stage}-serverless-python3-demo"
      definition:
        Comment: "demo stepfunctions"
        StartAt: "insertUserFunc"
        States:
          insertUserFunc:
            Comment: "insert user data and return status_code"
            Type: Task
            Resource: { "Fn::GetAtt": [ 
                "InsertUserFuncLambdaFunction", "Arn"
              ]}
            Next: statusCheck
          statusCheck:
            Comment: "validating process"
            Type: Choice
            Choices:
              - Variable: $.process
                BooleanEquals: true
                Next: promoteUserFun
          promoteUserFun:
            Comment: "update promoting user data with date"
            Type: Task
            Resource: { "Fn::GetAtt": [ 
                "PromoteUserFunLambdaFunction", "Arn"
              ]}
            Next: Done
          Done:
            Type: Pass
            End: true